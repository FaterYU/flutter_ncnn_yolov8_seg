// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/flutter_ncnn_yolov8_seg.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class FlutterNcnnYolov8SegBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlutterNcnnYolov8SegBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlutterNcnnYolov8SegBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.IntPtr)>>(
          'sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(
    int a,
    int b,
  ) {
    return _sum_long_running(
      a,
      b,
    );
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.IntPtr)>>(
          'sum_long_running');
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<Yolo8Result> createResult() {
    return _createResult();
  }

  late final _createResultPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Yolo8Result> Function()>>(
          'createResult');
  late final _createResult =
      _createResultPtr.asFunction<ffi.Pointer<Yolo8Result> Function()>();

  int destroyResult(
    ffi.Pointer<Yolo8Result> result,
  ) {
    return _destroyResult(
      result,
    );
  }

  late final _destroyResultPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Yolo8Result>)>>(
          'destroyResult');
  late final _destroyResult =
      _destroyResultPtr.asFunction<int Function(ffi.Pointer<Yolo8Result>)>();

  ffi.Pointer<Yolo8Model> createModel() {
    return _createModel();
  }

  late final _createModelPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Yolo8Model> Function()>>(
          'createModel');
  late final _createModel =
      _createModelPtr.asFunction<ffi.Pointer<Yolo8Model> Function()>();

  int destroyModel(
    ffi.Pointer<Yolo8Model> model,
  ) {
    return _destroyModel(
      model,
    );
  }

  late final _destroyModelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Yolo8Model>)>>(
          'destroyModel');
  late final _destroyModel =
      _destroyModelPtr.asFunction<int Function(ffi.Pointer<Yolo8Model>)>();

  int processImage(
    ffi.Pointer<Yolo8Model> model,
    ffi.Pointer<ffi.Uint8> pixels,
    ffi.Pointer<Yolo8Result> result,
    int width,
    int height,
  ) {
    return _processImage(
      model,
      pixels,
      result,
      width,
      height,
    );
  }

  late final _processImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Yolo8Model>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<Yolo8Result>, ffi.Int, ffi.Int)>>('processImage');
  late final _processImage = _processImagePtr.asFunction<
      int Function(ffi.Pointer<Yolo8Model>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<Yolo8Result>, int, int)>();
}

final class Rect extends ffi.Struct {
  @ffi.Int()
  external int x;

  @ffi.Int()
  external int y;

  @ffi.Int()
  external int width;

  @ffi.Int()
  external int height;
}

final class ObjectSeg extends ffi.Struct {
  @ffi.Int()
  external int label;

  @ffi.Float()
  external double prob;

  external Rect rect;

  external ffi.Pointer<ffi.Uint8> mask;
}

final class Yolo8Result extends ffi.Struct {
  @ffi.Int()
  external int count;

  external ffi.Pointer<ObjectSeg> objects;

  @ffi.Int()
  external int latency;
}

final class Yolo8Model extends ffi.Struct {
  external ffi.Pointer<ffi.Char> paramPath;

  external ffi.Pointer<ffi.Char> binPath;
}
